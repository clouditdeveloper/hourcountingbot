require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
const TelegramBot = require('node-telegram-bot-api');
const ExcelJS = require('exceljs');
const fs = require('fs');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const startMessage = `
  –í –º–∏—Ä–µ –≤—Ä–µ–º–µ–Ω–∏, –≥–¥–µ –º–∏–Ω—É—Ç—ã —Ç–∞—é—Ç, —è —è–≤–ª—è—é—Å—å —Å—Ç—Ä–∞–∂–µ–º —Å–µ–∫—É–Ω–¥ –∏ –º–≥–Ω–æ–≤–µ–Ω–∏–π ‚Äî ü§ñ –±–æ—Ç —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤. –Ø –≤–æ–ø–ª–æ—â–∞—é —Ä–∏—Ç–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—è –∑–∞ –∫–∞–∂–¥—ã–º –ø—Ä–æ–∂–∏—Ç—ã–º –º–≥–Ω–æ–≤–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—Ä–µ–º—è, –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –≤ —Ç—Ä—É–¥, –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–æ–∫—Ä–æ–≤–∏—â–µ –Ω–µ–ø—Ä–µ—Ö–æ–¥—è—â–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏. ‚åõ‚ú®
  `;

  const startButton = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ù–∞—á–∞—Ç—å —É—á–µ—Ç',
            callback_data: 'startTracking',
          },
        ],
      ],
    },
  };

  bot.sendMessage(chatId, startMessage, startButton);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —É—á–µ—Ç"
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;

  if (query.data === 'startTracking') {
    const date = getCurrentDate();
    const startTime = getCurrentTime();

    const workRecord = {
      date: date,
      startTime: startTime,
      breakTime: '45',
    };

    bot.sendMessage(chatId, `–î–∞—Ç–∞: ${date}`);
    bot.sendMessage(chatId, `–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${startTime}`);
    bot.sendMessage(chatId, '–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É?', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–î–∞',
              callback_data: 'endTracking',
            },
          ],
          [
            {
              text: '–ù–µ—Ç',
              callback_data: 'continueTracking',
            },
          ],
        ],
      },
    });

    bot.on('callback_query', (query) => {
      if (query.data === 'endTracking') {
        const endTime = getCurrentTime();
        workRecord.endTime = endTime;

        bot.sendMessage(chatId, `–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${endTime}`);
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:');
        bot.once('message', (msg) => {
          const objectName = msg.text;
          workRecord.objectName = objectName;

          saveWorkRecord(chatId, workRecord);
          bot.sendMessage(chatId, '–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
        });
      } else if (query.data === 'continueTracking') {
        bot.sendMessage(chatId, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É.');
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stunden
bot.onText(/\/stunden/, (msg) => {
  const chatId = msg.chat.id;

  sendExcelFile(chatId);
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Excel
function saveWorkRecord(chatId, workRecord) {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('–†–∞–±–æ—á–∏–µ —á–∞—Å—ã');

  const filePath = `${chatId}.xlsx`;

  try {
    if (fs.existsSync(filePath)) {
      workbook.xlsx.readFile(filePath);
    } else {
      worksheet.addRow(['Datum', 'Von', 'Pause', 'Bis', 'Ort', '24st. Entf', 'Frei', 'Krank', 'Stunden']);
    }

    worksheet.addRow([
      workRecord.date,
      workRecord.startTime,
      workRecord.breakTime,
      workRecord.endTime,
      workRecord.objectName,
    ]);

    workbook.xlsx.writeFile(filePath);
  } catch (error) {
    console.error(error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Excel
function sendExcelFile(chatId) {
  const filePath = `${chatId}.xlsx`;

  if (fs.existsSync(filePath)) {
    bot.sendDocument(chatId, filePath, { caption: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã.xlsx' });
  } else {
    bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
function isValidTime(timeString) {
  const regex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
  return regex.test(timeString);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
function getCurrentDate() {
  const currentDate = new Date();
  const day = String(currentDate.getDate()).padStart(2, '0');
  const month = String(currentDate.getMonth() + 1).padStart(2, '0');
  const year = currentDate.getFullYear();
  return `${day}.${month}.${year}`;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
function getCurrentTime() {
  const currentTime = new Date();
  const hours = String(currentTime.getHours()).padStart(2, '0');
  const minutes = String(currentTime.getMinutes()).padStart(2, '0');
  return `${hours}:${minutes}`;
}
